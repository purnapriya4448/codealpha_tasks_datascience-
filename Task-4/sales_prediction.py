# -*- coding: utf-8 -*-
"""Sales prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d4L9YWX-RgZLqklU8J4dxtuIgk80Fqzj

# **Sales Predition using Python**

**Importing packages**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""**Loading Dataset**"""

df = pd.read_csv('/content/Advertising Budget and Sales.csv')
df.head()

"""**Data cleaning**"""

df.shape

df.columns

df.info

df.describe()

df.dtypes

"""# **Exploratory Data Analysis**"""

sns.pairplot(df)
plt.show()

sns.heatmap(df.corr(),annot=True)
plt.show()

for col in df.columns:
  if col != 'Sales ($)':
    plt.figure(figsize=(10,5))
    sns.scatterplot(x=col,y='Sales ($)',hue=col,data=df)
    plt.title(f'Sales vs {col}')
    plt.show()

plt.figure(figsize=(10,5))
sns.boxplot(data=df)
plt.title('Box plot of Data')
plt.show()

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
scatter = ax.scatter(df['TV Ad Budget ($)'], df['Radio Ad Budget ($)'], df['Newspaper Ad Budget ($)'], c=df['Sales ($)'], cmap='viridis')

ax.set_xlabel('TV Ad Budget ($)')
ax.set_ylabel('Radio Ad Budget ($)')
ax.set_zlabel('Newspaper Ad Budget ($)')
plt.title('3D Scatter Plot')
plt.show()

!pip install ydata-profiling
import pandas as pd
from ydata_profiling import ProfileReport
from google.colab import files
uploaded = files.upload()
df = pd.read_csv(list(uploaded.keys())[0])
profile = ProfileReport(df, title="Sales Data Report", explorative=True)
profile.to_notebook_iframe()

"""# Data preprocessing"""

from sklearn.preprocessing import StandardScaler
std = StandardScaler()

scaled_df = pd.DataFrame(std.fit_transform(df.drop('Sales ($)',axis=1)), columns=df.drop('Sales ($)',axis=1).columns)

df = pd.concat([scaled_df,df.drop(['TV Ad Budget ($)','Radio Ad Budget ($)','Newspaper Ad Budget ($)'],axis=1)],axis=1)

df.head()

"""# Feature Selection and Splitting

"""

X = df.drop('Sales ($)', axis=1)
y = df['Sales ($)']

"""**Spliting test-train Dataset**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Model Training - Linear Regression**"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

"""# **Evaluate the Model**"""

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_test, y_pred)

from sklearn.metrics import mean_squared_error
mean_squared_error(y_test, y_pred)

import numpy as np
from sklearn.metrics import mean_squared_error
np.sqrt(mean_squared_error(y_test, y_pred))