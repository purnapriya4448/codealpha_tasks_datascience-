# -*- coding: utf-8 -*-
"""car price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qal6zJmzdrMBI1baZQm4C8_aLFivPJM

**Car Price Predition by using Machine Learning**

**Problem statement: Understand real-world applications of machine learning in price prediction**

**Importing packages**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn import metrics
import matplotlib.pyplot as plt
import numpy as np

"""**Loading the dataset**"""

import pandas as pd
from google.colab import files
uploaded = files.upload()

df = pd.read_csv(next(iter(uploaded)))
df.head()

"""**Features Of Dataset**"""

df.columns

df.info()

df.describe()

"""**cleaning the dataset**"""

df.dropna(inplace=True)
df.drop_duplicates(inplace=True)
df.info()
df.describe()

df['Car_Name'].unique()

df['Driven_kms'].unique()

df['Fuel_Type'].unique()

df['Owner'].unique()

df['Transmission'].unique()

df['Selling_type'].unique()

print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
df.info()
print("\nMissing values:\n", df.isnull().sum())

"""**Encoding the Categorical Data**"""

df = df.dropna()
if 'make' not in df.columns and 'CarName' in df.columns:
    df['make'] = df['CarName'].apply(lambda x: x.split()[0].lower())
categorical_cols = [col for col in ['make', 'fuel-type', 'body-style', 'num-of-doors'] if col in df.columns]
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
print("Encoded Dataset Shape:", df_encoded.shape)
df_encoded.head()

X = df_encoded.drop('Selling_Price', axis=1)
y = df_encoded['Selling_Price']
print(X)
print(y)
print("X shape:", X.shape)
print("y shape:", y.shape)

"""**Splitting Testing and Training Data**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

print("Training samples:", X_train.shape[0])
print("Testing samples:", X_test.shape[0])

import pandas as pd
from google.colab import files
uploaded = files.upload()
df = pd.read_csv(next(iter(uploaded)))
print(df.Fuel_Type.value_counts())
print(df.Selling_type.value_counts())
print(df.Transmission.value_counts())

"""**Exploratory Data Analysis**"""

import seaborn as sns
import matplotlib.pyplot as plt
sns.pairplot(df)
plt.show()

lin_reg_model = LinearRegression()

"""**Linear Regression**



"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
data= pd.read_csv('/content/car data (1).csv')
data.drop('Car_Name', axis=1, inplace=True)
data_encoded = pd.get_dummies(data, columns=['Fuel_Type', 'Selling_type', 'Transmission'], drop_first=True)

X = data_encoded.drop('Selling_Price', axis=1)
y = data_encoded['Selling_Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train, y_train)
y_pred = lin_reg_model.predict(X_test)

from sklearn.metrics import r2_score
print("RÂ² Score:", r2_score(y_test, y_pred))

data_encoded = pd.get_dummies(data, columns=['Fuel_Type', 'Selling_type', 'Transmission'], drop_first=True)

lin_reg_model.fit(X_train_encoded, y_train)

training_data_prediction = lin_reg_model.predict(X_train_encoded)

"""**Data visualization**"""

import matplotlib.pyplot as plt
import numpy as np
plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("predicted price")
plt.title("Actual prices vs predicted prices")
plt.show()

test_data_prediction = lin_reg_model.predict(X_test_encoded)

"""**Evaluation**"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn import metrics
try:
    data = pd.read_csv('/content/car data (1).csv')
except FileNotFoundError:
    print("Error: 'car data (1).csv' not found. Please upload the dataset.")
data.drop('Car_Name', axis=1, inplace=True)
X = data.drop('Selling_Price', axis=1)
y = data['Selling_Price']
categorical_cols = ['Fuel_Type', 'Selling_type', 'Transmission']
preprocessor = ColumnTransformer(
    transformers=[('onehot', OneHotEncoder(handle_unknown='ignore'), categorical_cols)],
    remainder='passthrough' )
X_encoded = preprocessor.fit_transform(X)
X_train_encoded, X_test_encoded, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)
lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train_encoded, y_train)
test_data_prediction = lin_reg_model.predict(X_test_encoded)
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error : ", error_score)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn import metrics
import matplotlib.pyplot as plt
import numpy as np
try:
    data = pd.read_csv('/content/car data (1).csv')
except FileNotFoundError:
    print("Error: 'car data (1).csv' not found. Please upload the dataset.")

data.drop('Car_Name', axis=1, inplace=True)
X = data.drop('Selling_Price', axis=1)
y = data['Selling_Price']
categorical_cols = ['Fuel_Type', 'Selling_type', 'Transmission']
preprocessor = ColumnTransformer(
    transformers=[('onehot', OneHotEncoder(handle_unknown='ignore'), categorical_cols)],
    remainder='passthrough'
)
X_encoded = preprocessor.fit_transform(X)
X_train_encoded, X_test_encoded, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)
lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train_encoded, y_train)
test_data_prediction = lin_reg_model.predict(X_test_encoded)
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error : ", error_score)
plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices (Test Data)")
plt.show()