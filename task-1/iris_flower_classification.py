# -*- coding: utf-8 -*-
"""Iris Flower Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_xZjXTLcTM00xKzKrW2U-6xRG2YQObv-

# **Task-Iris Flower Classification**

**Importing Necessary Libraries**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

"""**Loading and cleaning the dataset**"""

from sklearn.datasets import load_iris

iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['species'] = iris.target
print(data.head())

import pandas as pd
from sklearn.datasets import load_iris

iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['species'] = iris.target
print(df.describe())

"""**Describing the target(unique) columns**"""

from sklearn.datasets import load_iris
iris = load_iris()
print("Tables targets",(iris.target_names)) # Output: ['setosa' 'versicolor' 'virginica']

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
from sklearn.datasets import load_iris

iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['species'] = iris.target # Add the species column


# create heatmap 0n petal length and petal width
plt.figure(figsize=(8, 6))
correlation_matrix = df[['petal length (cm)', 'petal width (cm)']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap of Petal Length vs Petal Width')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
from sklearn.datasets import load_iris

iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['species'] = iris.target # Add the species column



# Create scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='sepal length (cm)', y='sepal width (cm)', hue='species', palette='Set1')

# Title and axis labels
plt.title('Iris Species by Sepal Length and Width')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend(title='Species')

# Show plot
plt.show()

!pip install -q ydata-profiling
from ydata_profiling import ProfileReport
profile = ProfileReport(df, title="Iris Dataset Profiling Report")
profile.to_notebook_iframe()

"""**Data Preprocessing**"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
x=iris.data
y=iris.target
x_train, x_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.2,
                                                    random_state=0)
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(x_train, y_train)

"""**Testing the model with random sample**"""

import numpy as np
x_new = np.array([[5, 2.9, 10, 0.2]])
prediction = knn.predict(x_new)
print("prediction: {}".format(prediction))
predicted_species = "Iris-" + iris.target_names[prediction[0]]
print("Prediction: {}".format(predicted_species))

""" **Calculating the accuracy**"""

y_pred = knn.predict(x_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred, target_names=iris.target_names)

print(f"Accuracy: {accuracy:.4f}")
print("\nClassification Report:")
print(class_report)

# Optional: Visualize the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()